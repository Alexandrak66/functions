kind: job
metadata:
  name: sklearn-classifier
  tag: ''
  hash: fe5793ca7915de64c8f68a04f06d82269b6201e8
  project: ''
  labels:
    author: yjb
    stage: development
  categories:
  - models
  - classifier
spec:
  command: ''
  args: []
  image: mlrun/ml-models:0.4.5
  env: []
  default_handler: train_model
  description: ''
  image_pull_policy: Always
  build:
    functionSourceCode: 
    commands: []
    code_origin: /User/functions/sklearn_classifier/function.yaml
