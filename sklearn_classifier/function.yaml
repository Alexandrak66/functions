kind: job
metadata:
  name: sklearn-classifier
  tag: ''
  hash: c21c099e9dc0aacb0c9afde0c0fe27006d61b765
  project: ''
  labels:
    author: yjb
    stage: development
  categories:
  - models
  - classifier
spec:
  command: ''
  args: []
  image: mlrun/ml-models:0.4.5
  env: []
  default_handler: train_model
  description: ''
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/mlrun/functions.git#6dad36b167efd50e0f0cf0703b35e94ec29f6dad:sklearn_classifier/sklearn_classifier.py
