kind: job
metadata:
  name: sklearn-classifier
  tag: latest
  hash: 427bae4b5f63faec3499da767059960326dfcc9c
  project: ''
  labels:
    author: yjb
  categories:
  - models
  - classifier
spec:
  command: ''
  args: []
  image: mlrun/ml-models
  env: []
  default_handler: train_model
  entry_points:
    train_model:
      name: train_model
      doc: train a classifier.
      parameters:
      - name: context
        type: MLClientCtx
        doc: the function context
      - name: model_pkg_class
        type: str
        doc: the model to train, e.g, "sklearn.neural_networks.MLPClassifier",  or
          json model config
      - name: dataset
        type: DataItem
        doc: ("data") name of raw data file
      - name: sample
        type: int
        doc: Selects the first n rows, or select a sample starting from the first.
          If negative <-1, select a random sample
        default: <_ast.USub object at 0x7f2b912dadd8>
      - name: label_column
        type: str
        doc: ground-truth (y) labels
        default: labels
      - name: test_size
        type: float
        doc: (0.05) test set size
        default: 0.05
      - name: train_val_split
        type: float
        doc: (0.75) Once the test set has been removed the training set gets this
          proportion.
        default: 0.75
      - name: rng
        type: int
        doc: (1) sklearn rng seed
        default: 1
      - name: model_filename
        type: str
        doc: model file filename, points to a directory
        default: model
      - name: models_dest
        type: str
        doc: models subfolder on artifact path
      - name: plots_dest
        type: str
        doc: plot subfolder on artifact path
      - name: score_method
        type: str
        doc: for multiclass classification
        default: micro
      - name: model_pkg_file
        type: str
        doc: json model config file
      - name: file_ext
        type: str
        doc: format for test_set_key hold out data
        default: parquet
      outputs: []
      lineno: 28
  description: train any classifier using scikit-learn's API
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/mlrun/functions.git#a7b6f417f33ef1ab5c9367f992c81fb1c9dea2f4:sklearn_classifier.ipynb
