kind: job
metadata:
  name: sklearn-classifier
  tag: ''
  hash: 8b4c40389c905dd56106e916a446450ac94c8564
  project: ''
  labels:
    author: yjb
    stage: development
  categories:
  - models
  - classifier
spec:
  command: ''
  args: []
  image: mlrun/ml-models:latest
  env: []
  default_handler: train_model
  description: ''
  image_pull_policy: Always
  build:
    functionSourceCode: 
    commands: []
    code_origin: /User/functions/sklearn_classifier/function.yaml
