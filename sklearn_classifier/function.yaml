kind: job
metadata:
  name: sklearn-classifier
  tag: ''
  hash: a804b94a183b9af78e8114ffa2420aa4e0128025
  project: ''
  labels:
    author: yjb
    stage: development
  categories:
  - models
  - classifier
spec:
  command: ''
  args: []
  image: mlrun/ml-models:0.4.5
  env: []
  default_handler: train_model
  description: ''
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/mlrun/functions.git#4beef786d05526f4ba9c4131dd44e4d7a1551c92:sklearn_classifier/sklearn_classifier.py
