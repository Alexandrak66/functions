kind: job
metadata:
  name: aggregate
  tag: ''
  hash: 16d561bc506d10a2cee28a8f9b29341c2750da7e
  project: ''
  labels:
    author: orz
  categories:
  - data-prep
spec:
  command: ''
  args: []
  image: mlrun/ml-models
  env: []
  default_handler: aggregate
  entry_points:
    aggregate:
      name: aggregate
      doc: "Time-series aggregation function\n\nWill perform a rolling aggregation\
        \ on {df_artifact}, over {window} by the selected {keys}\napplying {metric_aggs}\
        \ on {metrics} and {label_aggs} on {labels}. adding {suffix} to the \nfeature\
        \ names.\n\nif not {inplace}, will return the original {df_artifact}, joined\
        \ by the aggregated result."
      parameters:
      - name: context
      - name: df_artifact
        type: DataItem
        doc: MLRun input pointing to pandas dataframe (csv/parquet file path)
      - name: save_to
        type: str
        doc: Where to save the result dataframe. * If relative will add to the {artifact_path}
        default: aggregated-df.pq
      - name: keys
        type: list
        doc: Subset of indexes from the source dataframe to aggregate by (default=all)
      - name: metrics
        type: list
        doc: 'Array containing a list of metrics to run the aggregations on. (default=None) '
      - name: labels
        type: list
        doc: 'Array containing a list of labels to run the aggregations on. (default=None) '
      - name: metric_aggs
        type: list
        doc: 'Array containing a list of aggregation function names to run on {metrics}.
          (Ex: ''mean'', ''std'') (default=''mean'')'
        default:
        - mean
      - name: label_aggs
        type: list
        doc: 'Array containing a list of aggregation function names to run on {metrics}.
          (Ex: ''max'', ''min'') (default=''max'') '
        default:
        - max
      - name: suffix
        type: str
        doc: 'Suffix to add to the feature name, E.g: <Feature_Name>_<Agg_Function>_<Suffix>
          (Ex: ''last_60_mintes'') (default='''')'
      - name: window
        type: int
        doc: Window size to perform the rolling aggregate on. (default=3)
        default: 3
      - name: center
        type: bool
        doc: If True, Sets the value for the central sample in the window, If False,
          will set the value to the last sample. (default=False)
      - name: inplace
        type: bool
        doc: If True, will return only the aggregated results. If False, will join
          the aggregated results with the original dataframe
      - name: drop_na
        type: bool
        doc: Will drop na lines due to the Rolling.
        default: true
      outputs: []
      lineno: 7
  description: Rolling aggregation over Metrics and Lables according to specifications
  build:
    functionSourceCode: IyBHZW5lcmF0ZWQgYnkgbnVjbGlvLmV4cG9ydC5OdWNsaW9FeHBvcnRlcgoKaW1wb3J0IG9zCmltcG9ydCBwYW5kYXMgYXMgcGQKZnJvbSBtbHJ1bi5kYXRhc3RvcmUgaW1wb3J0IERhdGFJdGVtCgpkZWYgYWdncmVnYXRlKGNvbnRleHQsCiAgICAgICAgICAgICAgZGZfYXJ0aWZhY3Q6IERhdGFJdGVtLAogICAgICAgICAgICAgIHNhdmVfdG86IHN0ciA9ICdhZ2dyZWdhdGVkLWRmLnBxJywgCiAgICAgICAgICAgICAga2V5czogbGlzdCA9IE5vbmUsIAogICAgICAgICAgICAgIG1ldHJpY3M6IGxpc3QgPSBOb25lLCAKICAgICAgICAgICAgICBsYWJlbHM6IGxpc3QgPSBOb25lLCAKICAgICAgICAgICAgICBtZXRyaWNfYWdnczogbGlzdCA9IFsnbWVhbiddLCAKICAgICAgICAgICAgICBsYWJlbF9hZ2dzOiBsaXN0ID0gWydtYXgnXSwgCiAgICAgICAgICAgICAgc3VmZml4OiBzdHIgPSAnJywgCiAgICAgICAgICAgICAgd2luZG93OiBpbnQgPSAzLCAKICAgICAgICAgICAgICBjZW50ZXI6IGJvb2wgPSBGYWxzZSwgCiAgICAgICAgICAgICAgaW5wbGFjZTogYm9vbCA9IEZhbHNlLAogICAgICAgICAgICAgIGRyb3BfbmE6IGJvb2wgPSBUcnVlKToKICAgICIiIlRpbWUtc2VyaWVzIGFnZ3JlZ2F0aW9uIGZ1bmN0aW9uCiAgICAKICAgIFdpbGwgcGVyZm9ybSBhIHJvbGxpbmcgYWdncmVnYXRpb24gb24ge2RmX2FydGlmYWN0fSwgb3ZlciB7d2luZG93fSBieSB0aGUgc2VsZWN0ZWQge2tleXN9CiAgICBhcHBseWluZyB7bWV0cmljX2FnZ3N9IG9uIHttZXRyaWNzfSBhbmQge2xhYmVsX2FnZ3N9IG9uIHtsYWJlbHN9LiBhZGRpbmcge3N1ZmZpeH0gdG8gdGhlIAogICAgZmVhdHVyZSBuYW1lcy4KICAgIAogICAgaWYgbm90IHtpbnBsYWNlfSwgd2lsbCByZXR1cm4gdGhlIG9yaWdpbmFsIHtkZl9hcnRpZmFjdH0sIGpvaW5lZCBieSB0aGUgYWdncmVnYXRlZCByZXN1bHQuCiAgICAKICAgIDpwYXJhbSBkZl9hcnRpZmFjdDogTUxSdW4gaW5wdXQgcG9pbnRpbmcgdG8gcGFuZGFzIGRhdGFmcmFtZSAoY3N2L3BhcnF1ZXQgZmlsZSBwYXRoKQogICAgOnBhcmFtIHNhdmVfdG86ICAgICBXaGVyZSB0byBzYXZlIHRoZSByZXN1bHQgZGF0YWZyYW1lLgogICAgICAgICAgICAgICAgICAgICAgICAqIElmIHJlbGF0aXZlIHdpbGwgYWRkIHRvIHRoZSB7YXJ0aWZhY3RfcGF0aH0KICAgIDpwYXJhbSBrZXlzOiAgICAgICAgU3Vic2V0IG9mIGluZGV4ZXMgZnJvbSB0aGUgc291cmNlIGRhdGFmcmFtZSB0byBhZ2dyZWdhdGUgYnkgKGRlZmF1bHQ9YWxsKQogICAgOnBhcmFtIG1ldHJpY3M6ICAgICBBcnJheSBjb250YWluaW5nIGEgbGlzdCBvZiBtZXRyaWNzIHRvIHJ1biB0aGUgYWdncmVnYXRpb25zIG9uLiAoZGVmYXVsdD1Ob25lKSAKICAgIDpwYXJhbSBsYWJlbHM6ICAgICAgQXJyYXkgY29udGFpbmluZyBhIGxpc3Qgb2YgbGFiZWxzIHRvIHJ1biB0aGUgYWdncmVnYXRpb25zIG9uLiAoZGVmYXVsdD1Ob25lKSAKICAgIDpwYXJhbSBtZXRyaWNfYWdnczogQXJyYXkgY29udGFpbmluZyBhIGxpc3Qgb2YgYWdncmVnYXRpb24gZnVuY3Rpb24gbmFtZXMgdG8gcnVuIG9uIHttZXRyaWNzfS4KICAgICAgICAgICAgICAgICAgICAgICAgKEV4OiAnbWVhbicsICdzdGQnKSAoZGVmYXVsdD0nbWVhbicpCiAgICA6cGFyYW0gbGFiZWxfYWdnczogIEFycmF5IGNvbnRhaW5pbmcgYSBsaXN0IG9mIGFnZ3JlZ2F0aW9uIGZ1bmN0aW9uIG5hbWVzIHRvIHJ1biBvbiB7bWV0cmljc30uCiAgICAgICAgICAgICAgICAgICAgICAgIChFeDogJ21heCcsICdtaW4nKSAoZGVmYXVsdD0nbWF4JykgCiAgICA6cGFyYW0gc3VmZml4OiAgICAgIFN1ZmZpeCB0byBhZGQgdG8gdGhlIGZlYXR1cmUgbmFtZSwgRS5nOiA8RmVhdHVyZV9OYW1lPl88QWdnX0Z1bmN0aW9uPl88U3VmZml4PgogICAgICAgICAgICAgICAgICAgICAgICAoRXg6ICdsYXN0XzYwX21pbnRlcycpIChkZWZhdWx0PScnKQogICAgOnBhcmFtIHdpbmRvdzogICAgICBXaW5kb3cgc2l6ZSB0byBwZXJmb3JtIHRoZSByb2xsaW5nIGFnZ3JlZ2F0ZSBvbi4gKGRlZmF1bHQ9MykKICAgIDpwYXJhbSBjZW50ZXI6ICAgICAgSWYgVHJ1ZSwgU2V0cyB0aGUgdmFsdWUgZm9yIHRoZSBjZW50cmFsIHNhbXBsZSBpbiB0aGUgd2luZG93LAogICAgICAgICAgICAgICAgICAgICAgICBJZiBGYWxzZSwgd2lsbCBzZXQgdGhlIHZhbHVlIHRvIHRoZSBsYXN0IHNhbXBsZS4gKGRlZmF1bHQ9RmFsc2UpCiAgICA6cGFyYW0gaW5wbGFjZTogICAgIElmIFRydWUsIHdpbGwgcmV0dXJuIG9ubHkgdGhlIGFnZ3JlZ2F0ZWQgcmVzdWx0cy4KICAgICAgICAgICAgICAgICAgICAgICAgSWYgRmFsc2UsIHdpbGwgam9pbiB0aGUgYWdncmVnYXRlZCByZXN1bHRzIHdpdGggdGhlIG9yaWdpbmFsIGRhdGFmcmFtZQogICAgOnBhcmFtIGRyb3BfbmE6ICAgICBXaWxsIGRyb3AgbmEgbGluZXMgZHVlIHRvIHRoZSBSb2xsaW5nLgogICAgIiIiCiAgICAKICAgIAogICAgY29udGV4dC5sb2dnZXIuaW5mbyhmJ0FnZ3JlZ2F0aW5nIHtkZl9hcnRpZmFjdC51cmx9JykKICAgIGlucHV0X2RmID0gZGZfYXJ0aWZhY3QuYXNfZGYoKQogICAgCiAgICBpZiBub3QgKG1ldHJpY3Mgb3IgbGFiZWxzKToKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdwbGVhc2Ugc3BlY2lmeSBtZXRyaWNzIG9yIGxhYmVscyBwYXJhbScpCiAgICAKICAgIGlmIGtleXM6CiAgICAgICAgY3VycmVudF9pbmRleCA9IGlucHV0X2RmLmluZGV4Lm5hbWVzCiAgICAgICAgaW5kZXhlc190b19kcm9wID0gW2NvbCBmb3IgY29sIGluIGlucHV0X2RmLmluZGV4Lm5hbWVzIGlmIGNvbCBub3QgaW4ga2V5c10KICAgICAgICBkZiA9IGlucHV0X2RmLnJlc2V0X2luZGV4KGxldmVsPWluZGV4ZXNfdG9fZHJvcCkKICAgIGVsc2U6CiAgICAgICAgZGYgPSBpbnB1dF9kZgogICAgCiAgICBpZiBtZXRyaWNzOgogICAgICAgIG1ldHJpY3NfZGYgPSBkZi5sb2NbOiwgbWV0cmljc10ucm9sbGluZyh3aW5kb3c9d2luZG93LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXI9Y2VudGVyKS5hZ2dyZWdhdGUobWV0cmljX2FnZ3MpCiAgICAgICAgCiAgICAgICAgbWV0cmljc19kZi5jb2x1bW5zID0gWydfJy5qb2luKGNvbCkuc3RyaXAoKSBmb3IgY29sIGluIG1ldHJpY3NfZGYuY29sdW1ucy52YWx1ZXNdCiAgICAgICAgCiAgICAgICAgaWYgc3VmZml4OgogICAgICAgICAgICBtZXRyaWNzX2RmLmNvbHVtbnMgPSBbZid7bWV0cmljfV97c3VmZml4fScgZm9yIG1ldHJpYyBpbiBtZXRyaWNzX2RmLmNvbHVtbnNdCiAgICAgICAgICAgIAogICAgICAgIGlmIG5vdCBpbnBsYWNlOgogICAgICAgICAgICBmaW5hbF9kZiA9IHBkLm1lcmdlKGlucHV0X2RmLCBtZXRyaWNzX2RmLCBzdWZmaXhlcz0oJycsIHN1ZmZpeCksIGxlZnRfaW5kZXg9VHJ1ZSwgcmlnaHRfaW5kZXg9VHJ1ZSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBmaW5hbF9kZiA9IG1ldHJpY3NfZGYKCiAgICBpZiBsYWJlbHM6CiAgICAgICAgbGFiZWxzX2RmID0gZGYubG9jWzosIGxhYmVsc10ucm9sbGluZyh3aW5kb3c9d2luZG93LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyPWNlbnRlcikuYWdncmVnYXRlKGxhYmVsX2FnZ3MpCiAgICAgICAgbGFiZWxzX2RmLmNvbHVtbnMgPSBbJ18nLmpvaW4oY29sKS5zdHJpcCgpIGZvciBjb2wgaW4gbGFiZWxzX2RmLmNvbHVtbnMudmFsdWVzXQogICAgICAgIAogICAgICAgIGlmIHN1ZmZpeDoKICAgICAgICAgICAgbGFiZWxzX2RmLmNvbHVtbnMgPSBbZid7bGFiZWx9X3tzdWZmaXh9JyBmb3IgbGFiZWwgaW4gbGFiZWxzX2RmLmNvbHVtbnNdCiAgICAgICAgICAgIAogICAgICAgIGlmIG1ldHJpY3M6CiAgICAgICAgICAgIGZpbmFsX2RmID0gcGQubWVyZ2UoZmluYWxfZGYsIGxhYmVsc19kZiwgc3VmZml4ZXM9KCcnLCBzdWZmaXgpLCBsZWZ0X2luZGV4PVRydWUsIHJpZ2h0X2luZGV4PVRydWUpICAgCiAgICAgICAgZWxzZToKICAgICAgICAgICAgaWYgbm90IGlucGxhY2U6CiAgICAgICAgICAgICAgICBmaW5hbF9kZiA9IHBkLm1lcmdlKGlucHV0X2RmLCBsYWJlbHNfZGYsIHN1ZmZpeGVzPSgnJywgc3VmZml4KSwgbGVmdF9pbmRleD1UcnVlLCByaWdodF9pbmRleD1UcnVlKSAgICAgIAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgZmluYWxfZGYgPSBsYWJlbHNfZGYKICAgICAgICAgICAgICAgIAogICAgaWYgZHJvcF9uYToKICAgICAgICBmaW5hbF9kZiA9IGZpbmFsX2RmLmRyb3BuYSgpCiAgICAgICAgCiAgICBjb250ZXh0LmxvZ19kYXRhc2V0KGtleT0nYWdncmVnYXRlJywgCiAgICAgICAgICAgICAgICAgICAgICAgIGRmPWZpbmFsX2RmLCAKICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0PSdwYXJxdWV0JywKICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxfcGF0aD1zYXZlX3RvKQoK
    commands: []
    code_origin: https://github.com/mlrun/functions#1d1e4a97478e1194b73c78c4d9b0b6fe5d1dc162:aggregate.ipynb
