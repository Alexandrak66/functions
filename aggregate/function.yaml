kind: job
metadata:
  name: aggregate
  tag: ''
  hash: 86cfbd759d40e1e57a75ca585b6ec225d99bcea7
  project: ''
  labels:
    author: orz
  categories:
  - data-prep
spec:
  command: ''
  args: []
  image: mlrun/ml-models
  env: []
  default_handler: aggregate
  entry_points:
    aggregate:
      name: aggregate
      doc: "Time-series aggregation function\n\nWill perform a rolling aggregation\
        \ on {df_artifact}, over {window} by the selected {keys}\napplying {metric_aggs}\
        \ on {metrics} and {label_aggs} on {labels}. adding {suffix} to the \nfeature\
        \ names.\n\nif not {inplace}, will return the original {df_artifact}, joined\
        \ by the aggregated result."
      parameters:
      - name: context
      - name: df_artifact
        type: Union[DataItem, ]
        doc: MLRun input pointing to pandas dataframe (csv/parquet file path)
      - name: save_to
        type: str
        doc: Where to save the result dataframe. * If relative will add to the {artifact_path}
        default: aggregated-df.pq
      - name: keys
        type: list
        doc: Subset of indexes from the source dataframe to aggregate by (default=all)
      - name: metrics
        type: list
        doc: 'Array containing a list of metrics to run the aggregations on. (default=None) '
      - name: labels
        type: list
        doc: 'Array containing a list of labels to run the aggregations on. (default=None) '
      - name: metric_aggs
        type: list
        doc: 'Array containing a list of aggregation function names to run on {metrics}.
          (Ex: ''mean'', ''std'') (default=''mean'')'
        default:
        - mean
      - name: label_aggs
        type: list
        doc: 'Array containing a list of aggregation function names to run on {metrics}.
          (Ex: ''max'', ''min'') (default=''max'') '
        default:
        - max
      - name: suffix
        type: str
        doc: 'Suffix to add to the feature name, E.g: <Feature_Name>_<Agg_Function>_<Suffix>
          (Ex: ''last_60_mintes'') (default='''')'
      - name: window
        type: int
        doc: Window size to perform the rolling aggregate on. (default=3)
        default: 3
      - name: center
        type: bool
        doc: If True, Sets the value for the central sample in the window, If False,
          will set the value to the last sample. (default=False)
      - name: inplace
        type: bool
        doc: If True, will return only the aggregated results. If False, will join
          the aggregated results with the original dataframe
      - name: drop_na
        type: bool
        doc: Will drop na lines due to the Rolling.
        default: true
      outputs: []
      lineno: 9
  description: Rolling aggregation over Metrics and Lables according to specifications
  build:
    functionSourceCode: IyBHZW5lcmF0ZWQgYnkgbnVjbGlvLmV4cG9ydC5OdWNsaW9FeHBvcnRlcgoKaW1wb3J0IG9zCmltcG9ydCBwYW5kYXMgYXMgcGQKZnJvbSBtbHJ1bi5kYXRhc3RvcmUgaW1wb3J0IERhdGFJdGVtCgpmcm9tIHR5cGluZyBpbXBvcnQgVW5pb24KCmRlZiBhZ2dyZWdhdGUoY29udGV4dCwKICAgICAgICAgICAgICBkZl9hcnRpZmFjdDogVW5pb25bRGF0YUl0ZW0sIHBkLmNvcmUuZnJhbWUuRGF0YUZyYW1lXSwKICAgICAgICAgICAgICBzYXZlX3RvOiBzdHIgPSAnYWdncmVnYXRlZC1kZi5wcScsIAogICAgICAgICAgICAgIGtleXM6IGxpc3QgPSBOb25lLCAKICAgICAgICAgICAgICBtZXRyaWNzOiBsaXN0ID0gTm9uZSwgCiAgICAgICAgICAgICAgbGFiZWxzOiBsaXN0ID0gTm9uZSwgCiAgICAgICAgICAgICAgbWV0cmljX2FnZ3M6IGxpc3QgPSBbJ21lYW4nXSwgCiAgICAgICAgICAgICAgbGFiZWxfYWdnczogbGlzdCA9IFsnbWF4J10sIAogICAgICAgICAgICAgIHN1ZmZpeDogc3RyID0gJycsIAogICAgICAgICAgICAgIHdpbmRvdzogaW50ID0gMywgCiAgICAgICAgICAgICAgY2VudGVyOiBib29sID0gRmFsc2UsIAogICAgICAgICAgICAgIGlucGxhY2U6IGJvb2wgPSBGYWxzZSwKICAgICAgICAgICAgICBkcm9wX25hOiBib29sID0gVHJ1ZSk6CiAgICAiIiJUaW1lLXNlcmllcyBhZ2dyZWdhdGlvbiBmdW5jdGlvbgogICAgCiAgICBXaWxsIHBlcmZvcm0gYSByb2xsaW5nIGFnZ3JlZ2F0aW9uIG9uIHtkZl9hcnRpZmFjdH0sIG92ZXIge3dpbmRvd30gYnkgdGhlIHNlbGVjdGVkIHtrZXlzfQogICAgYXBwbHlpbmcge21ldHJpY19hZ2dzfSBvbiB7bWV0cmljc30gYW5kIHtsYWJlbF9hZ2dzfSBvbiB7bGFiZWxzfS4gYWRkaW5nIHtzdWZmaXh9IHRvIHRoZSAKICAgIGZlYXR1cmUgbmFtZXMuCiAgICAKICAgIGlmIG5vdCB7aW5wbGFjZX0sIHdpbGwgcmV0dXJuIHRoZSBvcmlnaW5hbCB7ZGZfYXJ0aWZhY3R9LCBqb2luZWQgYnkgdGhlIGFnZ3JlZ2F0ZWQgcmVzdWx0LgogICAgCiAgICA6cGFyYW0gZGZfYXJ0aWZhY3Q6IE1MUnVuIGlucHV0IHBvaW50aW5nIHRvIHBhbmRhcyBkYXRhZnJhbWUgKGNzdi9wYXJxdWV0IGZpbGUgcGF0aCkKICAgIDpwYXJhbSBzYXZlX3RvOiAgICAgV2hlcmUgdG8gc2F2ZSB0aGUgcmVzdWx0IGRhdGFmcmFtZS4KICAgICAgICAgICAgICAgICAgICAgICAgKiBJZiByZWxhdGl2ZSB3aWxsIGFkZCB0byB0aGUge2FydGlmYWN0X3BhdGh9CiAgICA6cGFyYW0ga2V5czogICAgICAgIFN1YnNldCBvZiBpbmRleGVzIGZyb20gdGhlIHNvdXJjZSBkYXRhZnJhbWUgdG8gYWdncmVnYXRlIGJ5IChkZWZhdWx0PWFsbCkKICAgIDpwYXJhbSBtZXRyaWNzOiAgICAgQXJyYXkgY29udGFpbmluZyBhIGxpc3Qgb2YgbWV0cmljcyB0byBydW4gdGhlIGFnZ3JlZ2F0aW9ucyBvbi4gKGRlZmF1bHQ9Tm9uZSkgCiAgICA6cGFyYW0gbGFiZWxzOiAgICAgIEFycmF5IGNvbnRhaW5pbmcgYSBsaXN0IG9mIGxhYmVscyB0byBydW4gdGhlIGFnZ3JlZ2F0aW9ucyBvbi4gKGRlZmF1bHQ9Tm9uZSkgCiAgICA6cGFyYW0gbWV0cmljX2FnZ3M6IEFycmF5IGNvbnRhaW5pbmcgYSBsaXN0IG9mIGFnZ3JlZ2F0aW9uIGZ1bmN0aW9uIG5hbWVzIHRvIHJ1biBvbiB7bWV0cmljc30uCiAgICAgICAgICAgICAgICAgICAgICAgIChFeDogJ21lYW4nLCAnc3RkJykgKGRlZmF1bHQ9J21lYW4nKQogICAgOnBhcmFtIGxhYmVsX2FnZ3M6ICBBcnJheSBjb250YWluaW5nIGEgbGlzdCBvZiBhZ2dyZWdhdGlvbiBmdW5jdGlvbiBuYW1lcyB0byBydW4gb24ge21ldHJpY3N9LgogICAgICAgICAgICAgICAgICAgICAgICAoRXg6ICdtYXgnLCAnbWluJykgKGRlZmF1bHQ9J21heCcpIAogICAgOnBhcmFtIHN1ZmZpeDogICAgICBTdWZmaXggdG8gYWRkIHRvIHRoZSBmZWF0dXJlIG5hbWUsIEUuZzogPEZlYXR1cmVfTmFtZT5fPEFnZ19GdW5jdGlvbj5fPFN1ZmZpeD4KICAgICAgICAgICAgICAgICAgICAgICAgKEV4OiAnbGFzdF82MF9taW50ZXMnKSAoZGVmYXVsdD0nJykKICAgIDpwYXJhbSB3aW5kb3c6ICAgICAgV2luZG93IHNpemUgdG8gcGVyZm9ybSB0aGUgcm9sbGluZyBhZ2dyZWdhdGUgb24uIChkZWZhdWx0PTMpCiAgICA6cGFyYW0gY2VudGVyOiAgICAgIElmIFRydWUsIFNldHMgdGhlIHZhbHVlIGZvciB0aGUgY2VudHJhbCBzYW1wbGUgaW4gdGhlIHdpbmRvdywKICAgICAgICAgICAgICAgICAgICAgICAgSWYgRmFsc2UsIHdpbGwgc2V0IHRoZSB2YWx1ZSB0byB0aGUgbGFzdCBzYW1wbGUuIChkZWZhdWx0PUZhbHNlKQogICAgOnBhcmFtIGlucGxhY2U6ICAgICBJZiBUcnVlLCB3aWxsIHJldHVybiBvbmx5IHRoZSBhZ2dyZWdhdGVkIHJlc3VsdHMuCiAgICAgICAgICAgICAgICAgICAgICAgIElmIEZhbHNlLCB3aWxsIGpvaW4gdGhlIGFnZ3JlZ2F0ZWQgcmVzdWx0cyB3aXRoIHRoZSBvcmlnaW5hbCBkYXRhZnJhbWUKICAgIDpwYXJhbSBkcm9wX25hOiAgICAgV2lsbCBkcm9wIG5hIGxpbmVzIGR1ZSB0byB0aGUgUm9sbGluZy4KICAgICIiIgogICAgCiAgICBmcm9tX21vZGVsID0gdHlwZShkZl9hcnRpZmFjdCkgPT0gcGQuRGF0YUZyYW1lCiAgICBpZiBmcm9tX21vZGVsOgogICAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8oJ0FnZ3JlZ2F0aW5nIGZyb20gQnVmZmVyJykKICAgICAgICBpbnB1dF9kZiA9IGRmX2FydGlmYWN0CiAgICBlbHNlOgogICAgICAgIGlmIGRmX2FydGlmYWN0LnVybC5lbmRzd2l0aCgnLycpOiAgICMgaXMgYSBkaXJlY3Rvcnk/CiAgICAgICAgICAgIG1wYXRoID0gW29zLnBhdGguam9pbihkZl9hcnRpZmFjdC51cmwsIGZpbGUpIGZvciBmaWxlIGluIGRmX2FydGlmYWN0Lmxpc3RkaXIoKV0KICAgICAgICAgICAgbGF0ZXN0ID0gbWF4KG1wYXRoLCBrZXk9b3MucGF0aC5nZXRtdGltZSkgCiAgICAgICAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8oZidBZ2dyZWdhdGluZyB7bGF0ZXN0fScpCiAgICAgICAgICAgIGlucHV0X2RmID0gY29udGV4dC5nZXRfZGF0YWl0ZW0obGF0ZXN0KS5hc19kZigpCiAgICAgICAgZWxzZTogICMgQSByZWd1bGFyIGFydGlmYWN0CiAgICAgICAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8oZidBZ2dyZWdhdGluZyB7ZGZfYXJ0aWZhY3QudXJsfScpCiAgICAgICAgICAgIGlucHV0X2RmID0gZGZfYXJ0aWZhY3QuYXNfZGYoKQogICAgCiAgICBpZiBub3QgKG1ldHJpY3Mgb3IgbGFiZWxzKToKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdwbGVhc2Ugc3BlY2lmeSBtZXRyaWNzIG9yIGxhYmVscyBwYXJhbScpCiAgICAKICAgIGlmIGtleXM6CiAgICAgICAgY3VycmVudF9pbmRleCA9IGlucHV0X2RmLmluZGV4Lm5hbWVzCiAgICAgICAgaW5kZXhlc190b19kcm9wID0gW2NvbCBmb3IgY29sIGluIGlucHV0X2RmLmluZGV4Lm5hbWVzIGlmIGNvbCBub3QgaW4ga2V5c10KICAgICAgICBkZiA9IGlucHV0X2RmLnJlc2V0X2luZGV4KGxldmVsPWluZGV4ZXNfdG9fZHJvcCkKICAgIGVsc2U6CiAgICAgICAgZGYgPSBpbnB1dF9kZgogICAgICAgIAogICAgaWYgbWV0cmljczoKICAgICAgICBtZXRyaWNzX2RmID0gZGYubG9jWzosIG1ldHJpY3NdLnJvbGxpbmcod2luZG93PXdpbmRvdywgY2VudGVyPWNlbnRlcikuYWdncmVnYXRlKG1ldHJpY19hZ2dzKQogICAgICAgIAogICAgICAgIG1ldHJpY3NfZGYuY29sdW1ucyA9IFsnXycuam9pbihjb2wpLnN0cmlwKCkgZm9yIGNvbCBpbiBtZXRyaWNzX2RmLmNvbHVtbnMudmFsdWVzXQogICAgICAgIAogICAgICAgIGlmIHN1ZmZpeDoKICAgICAgICAgICAgbWV0cmljc19kZi5jb2x1bW5zID0gW2Yne21ldHJpY31fe3N1ZmZpeH0nIGZvciBtZXRyaWMgaW4gbWV0cmljc19kZi5jb2x1bW5zXQogICAgICAgICAgICAKICAgICAgICBpZiBub3QgaW5wbGFjZToKICAgICAgICAgICAgZmluYWxfZGYgPSBwZC5tZXJnZShpbnB1dF9kZiwgbWV0cmljc19kZiwgc3VmZml4ZXM9KCcnLCBzdWZmaXgpLCBsZWZ0X2luZGV4PVRydWUsIHJpZ2h0X2luZGV4PVRydWUpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZmluYWxfZGYgPSBtZXRyaWNzX2RmCgogICAgaWYgbGFiZWxzOgogICAgICAgIGxhYmVsc19kZiA9IGRmLmxvY1s6LCBsYWJlbHNdLnJvbGxpbmcod2luZG93PXdpbmRvdywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlcj1jZW50ZXIpLmFnZ3JlZ2F0ZShsYWJlbF9hZ2dzKQogICAgICAgIGxhYmVsc19kZi5jb2x1bW5zID0gWydfJy5qb2luKGNvbCkuc3RyaXAoKSBmb3IgY29sIGluIGxhYmVsc19kZi5jb2x1bW5zLnZhbHVlc10KICAgICAgICAKICAgICAgICBpZiBzdWZmaXg6CiAgICAgICAgICAgIGxhYmVsc19kZi5jb2x1bW5zID0gW2Yne2xhYmVsfV97c3VmZml4fScgZm9yIGxhYmVsIGluIGxhYmVsc19kZi5jb2x1bW5zXQogICAgICAgICAgICAKICAgICAgICBpZiBtZXRyaWNzOgogICAgICAgICAgICBmaW5hbF9kZiA9IHBkLm1lcmdlKGZpbmFsX2RmLCBsYWJlbHNfZGYsIHN1ZmZpeGVzPSgnJywgc3VmZml4KSwgbGVmdF9pbmRleD1UcnVlLCByaWdodF9pbmRleD1UcnVlKSAgIAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGlmIG5vdCBpbnBsYWNlOgogICAgICAgICAgICAgICAgZmluYWxfZGYgPSBwZC5tZXJnZShpbnB1dF9kZiwgbGFiZWxzX2RmLCBzdWZmaXhlcz0oJycsIHN1ZmZpeCksIGxlZnRfaW5kZXg9VHJ1ZSwgcmlnaHRfaW5kZXg9VHJ1ZSkgICAgICAKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGZpbmFsX2RmID0gbGFiZWxzX2RmCiAgICAgICAgICAgICAgICAKICAgIGlmIGRyb3BfbmE6CiAgICAgICAgZmluYWxfZGYgPSBmaW5hbF9kZi5kcm9wbmEoKQogICAgICAgIAogICAgY29udGV4dC5sb2dnZXIuaW5mbygnTG9nZ2luZyBhcnRpZmFjdCcpCiAgICBpZiBub3QgZnJvbV9tb2RlbDoKICAgICAgICBjb250ZXh0LmxvZ19kYXRhc2V0KGtleT0nYWdncmVnYXRlJywgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZj1maW5hbF9kZiwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ9J3BhcnF1ZXQnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxfcGF0aD1zYXZlX3RvKQogICAgZWxzZToKICAgICAgICByZXR1cm4gZmluYWxfZGYKCg==
    commands: []
    code_origin: https://github.com/mlrun/functions#0251037fa79f33a87bce76c1f09b697bb5dbb855:aggregate.ipynb
