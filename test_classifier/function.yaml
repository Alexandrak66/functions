kind: job
metadata:
  name: test-classifier
  tag: ''
  hash: 638511370f81a098574038e07810a0b433104775
  project: ''
  labels:
    author: yjb
    stage: development
  categories:
  - models
  - test
spec:
  command: ''
  args: []
  image: mlrun/ml-models:latest
  env: []
  default_handler: test_classifier
  description: ''
  image_pull_policy: Always
  build:
    functionSourceCode: 
    commands: []
    code_origin: /User/functions/test_classifier/function.yaml
