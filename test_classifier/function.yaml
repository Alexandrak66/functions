kind: job
metadata:
  name: test-classifier
  tag: latest
  hash: 40d4380fcc3458d99f44c8ab3a4905821291dcfd
  project: ''
  labels:
    author: yjb
  categories:
  - models
  - testing
spec:
  command: ''
  args: []
  image: mlrun/ml-models
  env: []
  default_handler: test_classifier
  entry_points:
    _gcf_clear:
      name: _gcf_clear
      doc: ''
      parameters:
      - name: plt
      outputs: []
      lineno: 25
    test_classifier:
      name: test_classifier
      doc: "Test one or more classifier models against held-out dataset\n\nUsing held-out\
        \ test features, evaluates the peformance of the estimated model\n\nCan be\
        \ part of a kubeflow pipeline as a test step that is run post EDA and \ntraining/validation\
        \ cycles"
      parameters:
      - name: context
        type: MLClientCtx
        doc: the function context
      - name: models_path
        type: str
        doc: artifact models representing a file or a folder
      - name: test_set
        type: str
        doc: test features and labels
      - name: label_column
        type: str
        doc: column name for ground truth labels
      - name: score_method
        type: str
        doc: for multiclass classification
        default: micro
      - name: plots_dest
        type: str
        doc: dir for test plots
      outputs: []
      lineno: 30
    _eval_model:
      name: _eval_model
      doc: ''
      parameters:
      - name: model
      outputs: []
      lineno: 56
  description: test a classifier using held-out or new data
  build:
    functionSourceCode: IyBHZW5lcmF0ZWQgYnkgbnVjbGlvLmV4cG9ydC5OdWNsaW9FeHBvcnRlciBvbiAyMDIwLTAzLTMxIDEyOjMzCgppbXBvcnQgb3MKaW1wb3J0IGpzb24KaW1wb3J0IGltcG9ydGxpYgpmcm9tIGNsb3VkcGlja2xlIGltcG9ydCBsb2FkCgppbXBvcnQgbnVtcHkgYXMgbnAKaW1wb3J0IHBhbmRhcyBhcyBwZAoKaW1wb3J0IG1hdHBsb3RsaWIucHlwbG90IGFzIHBsdApmcm9tIHNrbGVhcm4gaW1wb3J0IG1ldHJpY3MKZnJvbSBza2xlYXJuLnByZXByb2Nlc3NpbmcgaW1wb3J0IGxhYmVsX2JpbmFyaXplCmZyb20gc2tsZWFybi51dGlscy5tdWx0aWNsYXNzIGltcG9ydCB1bmlxdWVfbGFiZWxzCgpmcm9tIG1scnVuLmV4ZWN1dGlvbiBpbXBvcnQgTUxDbGllbnRDdHgKZnJvbSBtbHJ1bi5kYXRhc3RvcmUgaW1wb3J0IERhdGFJdGVtCmZyb20gbWxydW4uYXJ0aWZhY3RzIGltcG9ydCBUYWJsZUFydGlmYWN0LCBQbG90QXJ0aWZhY3QKCmZyb20gbWxydW4ubWx1dGlscyBpbXBvcnQgcGxvdF9yb2MsIHBsb3RfaW1wb3J0YW5jZSwgZ2NmX2NsZWFyCgppbXBvcnQgd2FybmluZ3MKd2FybmluZ3Muc2ltcGxlZmlsdGVyKGFjdGlvbj0iaWdub3JlIiwgY2F0ZWdvcnk9RnV0dXJlV2FybmluZykKCmRlZiBfZ2NmX2NsZWFyKHBsdCk6CiAgICBwbHQuY2xhKCkKICAgIHBsdC5jbGYoKQogICAgcGx0LmNsb3NlKCkgICAgICAgIAoKZGVmIHRlc3RfY2xhc3NpZmllcigKICAgIGNvbnRleHQ6IE1MQ2xpZW50Q3R4LAogICAgbW9kZWxzX3BhdGg6IHN0ciwgCiAgICB0ZXN0X3NldDogc3RyLAogICAgbGFiZWxfY29sdW1uOiBzdHIsCiAgICBzY29yZV9tZXRob2Q6IHN0ciA9ICdtaWNybycsCiAgICBwbG90c19kZXN0OiBzdHIgPSAiIgopIC0+IE5vbmU6CiAgICAiIiJUZXN0IG9uZSBvciBtb3JlIGNsYXNzaWZpZXIgbW9kZWxzIGFnYWluc3QgaGVsZC1vdXQgZGF0YXNldAogICAgCiAgICBVc2luZyBoZWxkLW91dCB0ZXN0IGZlYXR1cmVzLCBldmFsdWF0ZXMgdGhlIHBlZm9ybWFuY2Ugb2YgdGhlIGVzdGltYXRlZCBtb2RlbAogICAgCiAgICBDYW4gYmUgcGFydCBvZiBhIGt1YmVmbG93IHBpcGVsaW5lIGFzIGEgdGVzdCBzdGVwIHRoYXQgaXMgcnVuIHBvc3QgRURBIGFuZCAKICAgIHRyYWluaW5nL3ZhbGlkYXRpb24gY3ljbGVzCiAgICAKICAgIDpwYXJhbSBjb250ZXh0OiAgICAgICAgIHRoZSBmdW5jdGlvbiBjb250ZXh0CiAgICA6cGFyYW0gbW9kZWxzX3BhdGg6ICAgICBhcnRpZmFjdCBtb2RlbHMgcmVwcmVzZW50aW5nIGEgZmlsZSBvciBhIGZvbGRlcgogICAgOnBhcmFtIHRlc3Rfc2V0OiAgICAgICAgdGVzdCBmZWF0dXJlcyBhbmQgbGFiZWxzCiAgICA6cGFyYW0gbGFiZWxfY29sdW1uOiAgICBjb2x1bW4gbmFtZSBmb3IgZ3JvdW5kIHRydXRoIGxhYmVscwogICAgOnBhcmFtIHNjb3JlX21ldGhvZDogICAgZm9yIG11bHRpY2xhc3MgY2xhc3NpZmljYXRpb24KICAgIDpwYXJhbSBwbG90c19kZXN0OiAgICAgICBkaXIgZm9yIHRlc3QgcGxvdHMKICAgICIiIgogICAgeHRlc3QgPSBwZC5yZWFkX3BhcnF1ZXQoc3RyKHRlc3Rfc2V0KSkKICAgIHl0ZXN0ID0geHRlc3QucG9wKGxhYmVsX2NvbHVtbikKICAgIAogICAgY29udGV4dC5oZWFkZXIgPSBsaXN0KHh0ZXN0LmNvbHVtbnMudmFsdWVzKQogICAgZGVmIF9ldmFsX21vZGVsKG1vZGVsKToKICAgICAgICB5dGVzdGIgPSBsYWJlbF9iaW5hcml6ZSh5dGVzdCwgY2xhc3Nlcz15dGVzdC51bmlxdWUoKSkKICAgICAgICBjbGYgPSBsb2FkKG9wZW4obW9kZWwsICJyYiIpKQogICAgICAgIGlmIGNhbGxhYmxlKGdldGF0dHIoY2xmLCAicHJlZGljdF9wcm9iYSIpKToKICAgICAgICAgICAgeV9zY29yZSA9IGNsZi5wcmVkaWN0X3Byb2JhKHh0ZXN0LnZhbHVlcykKICAgICAgICAgICAgeXByZWQgPSBjbGYucHJlZGljdCh4dGVzdC52YWx1ZXMpCiAgICAgICAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8oZiJ5X3Njb3JlLnNoYXBlIHt5X3Njb3JlLnNoYXBlfSIpCiAgICAgICAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8oZiJ5dGVzdGIuc2hhcGUge3l0ZXN0Yi5zaGFwZX0iKQogICAgICAgICAgICBwbG90X3JvYyhjb250ZXh0LCB5dGVzdGIsIHlfc2NvcmUsIGtleT0ncm9jJywgcGxvdHNfZGlyPXBsb3RzX2Rlc3QpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgeXByZWQgPSBjbGYucHJlZGljdCh4dGVzdC52YWx1ZXMpICMgcmVmYWN0b3IKICAgICAgICAgICAgeV9zY29yZSA9IE5vbmUKICAgICAgICAgICAgCiAgICAgICAgZ2NmX2NsZWFyKHBsdCkKICAgICAgIAogICAgICAgIG1ldHJpY3MucGxvdF9jb25mdXNpb25fbWF0cml4KGNsZiwgeHRlc3QsIHl0ZXN0LCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbHM9eXRlc3QudW5pcXVlKCksIG5vcm1hbGl6ZT0ndHJ1ZScpIAogICAgICAgIAogICAgICAgIGNvbnRleHQubG9nX2FydGlmYWN0KFBsb3RBcnRpZmFjdCgiY29uZnVzaW9uIiwgYm9keT1wbHQuZ2NmKCkpLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbF9wYXRoPWYie3Bsb3RzX2Rlc3R9L2NvbmZ1c2lvbi5odG1sIikgICAgICAgIAogICAgCiAgICAgICAgaWYgaGFzYXR0cihjbGYsICJmZWF0dXJlX2ltcG9ydGFuY2VzXyIpOgogICAgICAgICAgICBwbG90X2ltcG9ydGFuY2UoY29udGV4dCwgY2xmLCBrZXk9ZiJmZWF0aW1wIikKCiAgICAgICAgeXRlc3RiID0gbGFiZWxfYmluYXJpemUoeXRlc3QsIGNsYXNzZXM9eXRlc3QudW5pcXVlKCkpICMgaWYgYmluYXJ5IDAvMSBsYWJlbHMsIHdpbGwgcmV0dXJuIGxhYmVscyBhcyBpcwogICAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8oZiJ5X3Njb3JlLnNoYXBlIHt5X3Njb3JlLnNoYXBlfSIpCiAgICAgICAgY29udGV4dC5sb2dnZXIuaW5mbyhmInl2YWxpZGIuc2hhcGUge3l0ZXN0Yi5zaGFwZX0iKQogICAgICAgIGlmIHl0ZXN0Yi5zaGFwZVsxXSA+IDE6CiAgICAgICAgICAgIGF2ZXJhZ2VfcHJlY2lzaW9uID0gbWV0cmljcy5hdmVyYWdlX3ByZWNpc2lvbl9zY29yZSh5dGVzdGIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5X3Njb3JlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXZlcmFnZT1zY29yZV9tZXRob2QpCiAgICAgICAgICAgIGNvbnRleHQubG9nX3Jlc3VsdChmInJvY2F1YyIsIG1ldHJpY3Mucm9jX2F1Y19zY29yZSh5dGVzdGIsIHlfc2NvcmUpKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGF2ZXJhZ2VfcHJlY2lzaW9uID0gbWV0cmljcy5hdmVyYWdlX3ByZWNpc2lvbl9zY29yZSh5dGVzdGIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5X3Njb3JlWzosIDFdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXZlcmFnZT1zY29yZV9tZXRob2QpCiAgICAgICAgICAgIGNvbnRleHQubG9nX3Jlc3VsdChmInJvY2F1YyIsIG1ldHJpY3Mucm9jX2F1Y19zY29yZSh5dGVzdGIsIHlfc2NvcmVbOiwgMV0pKQoKICAgICAgICBjb250ZXh0LmxvZ19yZXN1bHQoZiJhdmdfcHJlY3Njb3JlIiwgYXZlcmFnZV9wcmVjaXNpb24pCiAgICAgICAgY29udGV4dC5sb2dfcmVzdWx0KGYiYWNjdXJhY3kiLCBmbG9hdChjbGYuc2NvcmUoeHRlc3QsIHl0ZXN0KSkpCiAgICAgICAgY29udGV4dC5sb2dfcmVzdWx0KGYiZjFfc2NvcmUiLCBtZXRyaWNzLmYxX3Njb3JlKHl0ZXN0LCB5cHJlZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXZlcmFnZT1zY29yZV9tZXRob2QpKQogICAgCiAgICBtb2RlbHNfcGF0aCA9IHN0cihtb2RlbHNfcGF0aCkKICAgIGlmIG1vZGVsc19wYXRoLmVuZHN3aXRoKCcucGtsJyk6CiAgICAgICAgX2V2YWxfbW9kZWwobW9kZWxzX3BhdGgpCiAgICAgICAgCiAgICBlbHNlOgogICAgICAgIGZvciBtb2RlbCBpbiBvcy5saXN0ZGlyKG1vZGVsc19wYXRoKToKICAgICAgICAgICAgaWYgbW9kZWwuZW5kc3dpdGgoJy5wa2wnKToKICAgICAgICAgICAgICAgIF9ldmFsX21vZGVsKG9zLnBhdGguam9pbihtb2RlbHNfcGF0aCwgbW9kZWwpKQoK
    commands: []
    code_origin: https://github.com/mlrun/functions#7f0ceb7be97722ed85f5cc9f98dba064fc10d162:test_classifier.ipynb
