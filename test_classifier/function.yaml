kind: job
metadata:
  name: test-classifier
  tag: ''
  hash: e41b41cc0dee62c79550be0593d661fe474c8173
  project: ''
  labels:
    author: yjb
    stage: development
  categories:
  - models
  - test
spec:
  command: ''
  args: []
  image: mlrun/ml-models:0.4.5
  env: []
  default_handler: test_classifier
  description: ''
  image_pull_policy: Always
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/mlrun/functions.git#90dd42fcd544762b263200f5f93c36796bfceece:test_classifier/test_classifier.py
