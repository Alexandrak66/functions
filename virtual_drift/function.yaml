kind: job
metadata:
  name: virtual-drift
  tag: ''
  hash: 28b7c43d321dbd71024a22b5b3e9d2639723e9cc
  project: ''
  labels:
    author: orz
  categories:
  - ml
  - serve
  - concept-drift
spec:
  command: ''
  args: []
  image: mlrun/ml-models
  env: []
  default_handler: drift_magnitude
  entry_points:
    to_observations:
      name: to_observations
      doc: ''
      parameters:
      - name: context
      - name: t
      - name: u
      - name: key
      outputs: []
      lineno: 15
    tvd:
      name: tvd
      doc: ''
      parameters:
      - name: t
      - name: u
      outputs: []
      lineno: 32
    helinger:
      name: helinger
      doc: ''
      parameters:
      - name: t
      - name: u
      outputs: []
      lineno: 35
    kl_divergence:
      name: kl_divergence
      doc: ''
      parameters:
      - name: t
      - name: u
      outputs: []
      lineno: 38
    all_metrics:
      name: all_metrics
      doc: ''
      parameters:
      - name: t
      - name: u
      outputs: []
      lineno: 43
    drift_magnitude:
      name: drift_magnitude
      doc: ''
      parameters:
      - name: context
      - name: t
      - name: u
      - name: label_col
      - name: prediction_col
      - name: discretizers
        type: dict
      - name: n_bins
        default: 5
      - name: stream_name
        type: str
        default: some_stream
      - name: results_tsdb_container
        type: str
        default: bigdata
      - name: results_tsdb_table
        type: str
        default: concept_drift/drift_magnitude
      outputs: []
      lineno: 46
  description: Compute drift magnitude between Time-Samples T and U
  build:
    functionSourceCode: IyBHZW5lcmF0ZWQgYnkgbnVjbGlvLmV4cG9ydC5OdWNsaW9FeHBvcnRlcgoKaW1wb3J0IG9zCmltcG9ydCBwYW5kYXMgYXMgcGQKaW1wb3J0IG51bXB5IGFzIG5wCmltcG9ydCBzY2lweSBhcyBzcAppbXBvcnQgcGlja2xlCmltcG9ydCBkYXRldGltZQoKaW1wb3J0IHYzaW9fZnJhbWVzIGFzIHYzZgoKaW1wb3J0IG1hdHBsb3RsaWIucHlwbG90IGFzIHBsdApmcm9tIHNrbGVhcm4ucHJlcHJvY2Vzc2luZyBpbXBvcnQgS0JpbnNEaXNjcmV0aXplcgoKZGVmIHRvX29ic2VydmF0aW9ucyhjb250ZXh0LCB0LCB1LCBrZXkpOgogICAgdCA9IHQuYXBwbHkobGFtYmRhIHJvdzogZiJ7J18nLmpvaW4oW3N0cihyb3dbdmFsXSkgZm9yIHZhbCBpbiB0LmNvbHVtbnNdKX0iLCBheGlzPTEpLnZhbHVlX2NvdW50cygpLnNvcnRfaW5kZXgoKQogICAgdSA9IHUuYXBwbHkobGFtYmRhIHJvdzogZiJ7J18nLmpvaW4oW3N0cihyb3dbdmFsXSkgZm9yIHZhbCBpbiB1LmNvbHVtbnNdKX0iLCBheGlzPTEpLnZhbHVlX2NvdW50cygpLnNvcnRfaW5kZXgoKQoKICAgIGpvaW5lZF91bmlxdWVzID0gcGQuRGF0YUZyYW1lKFt0LCB1XSkuVC5maWxsbmEoMCkuc29ydF9pbmRleCgpCiAgICBqb2luZWRfdW5pcXVlcy5jb2x1bW5zID0gWyd0JywgJ3UnXQoKICAgIHRfb2JzID0gam9pbmVkX3VuaXF1ZXMubG9jWzosICd0J10KICAgIHVfb2JzID0gam9pbmVkX3VuaXF1ZXMubG9jWzosICd1J10KCiAgICB0X3BkZiA9IHRfb2JzL3Rfb2JzLnN1bSgpCiAgICB1X3BkZiA9IHVfb2JzL3Vfb2JzLnN1bSgpCgogICAgY29udGV4dC5sb2dfZGF0YXNldChmJ3trZXl9X3RfcGRmJywgcGQuRGF0YUZyYW1lKHRfcGRmKSwgZm9ybWF0PSdwYXJxdWV0JykKICAgIGNvbnRleHQubG9nX2RhdGFzZXQoZid7a2V5fV91X3BkZicsIHBkLkRhdGFGcmFtZSh1X3BkZiksIGZvcm1hdD0ncGFycXVldCcpCiAgICByZXR1cm4gdF9wZGYsIHVfcGRmCgpkZWYgdHZkKHQsIHUpOgogICAgcmV0dXJuIHN1bShhYnModCAtIHUpKSAvIDIKCmRlZiBoZWxpbmdlcih0LCB1KToKICAgIHJldHVybiAobnAuc3FydChucC5zdW0obnAucG93ZXIobnAuc3FydCh0KSAtIG5wLnNxcnQodSksIDIpKSkpL25wLnNxcnQoMikKCmRlZiBrbF9kaXZlcmdlbmNlKHQsIHUpOgogICAgdF91ID0gbnAuc3VtKG5wLndoZXJlKHQgIT0gMCwgdCAqIG5wLmxvZyh0IC8gdSksIDApKQogICAgdV90ID0gbnAuc3VtKG5wLndoZXJlKHUgIT0gMCwgdSAqIG5wLmxvZyh1IC8gdCksIDApKQogICAgcmV0dXJuIHRfdSArIHVfdAoKZGVmIGFsbF9tZXRyaWNzKHQsIHUpOgogICAgcmV0dXJuIHR2ZCh0LCB1KSwgaGVsaW5nZXIodCwgdSksIGtsX2RpdmVyZ2VuY2UodCwgdSkKCmRlZiBkcmlmdF9tYWduaXR1ZGUoY29udGV4dCwgdDogcGQuRGF0YUZyYW1lLCB1OiBwZC5EYXRhRnJhbWUsIAogICAgICAgICBsYWJlbF9jb2w9Tm9uZSwgcHJlZGljdGlvbl9jb2w9Tm9uZSwgCiAgICAgICAgIGRpc2NyZXRpemVyczogZGljdCA9IE5vbmUsIG5fYmlucz01LAogICAgICAgICBzdHJlYW1fbmFtZTogc3RyID0gJ3NvbWVfc3RyZWFtJywKICAgICAgICAgcmVzdWx0c190c2RiX2NvbnRhaW5lcjogc3RyID0gJ2JpZ2RhdGEnLAogICAgICAgICByZXN1bHRzX3RzZGJfdGFibGU6IHN0ciA9ICdjb25jZXB0X2RyaWZ0L2RyaWZ0X21hZ25pdHVkZScpOgogICAgCiAgICB2M2lvX2NsaWVudCA9IHYzZi5DbGllbnQoJ2ZyYW1lc2Q6ODA4MScsIGNvbnRhaW5lcj1yZXN1bHRzX3RzZGJfY29udGFpbmVyKQogICAgdHJ5OgogICAgICAgIHYzaW9fY2xpZW50LmNyZWF0ZSgndHNkYicsIHJlc3VsdHNfdHNkYl90YWJsZSwgaWZfZXhpc3RzPTEsIHJhdGU9JzEvcycpCiAgICBleGNlcHQ6CiAgICAgICAgdjNpb19jbGllbnQuY3JlYXRlKCd0c2RiJywgcmVzdWx0c190c2RiX3RhYmxlLCBpZl9leGlzdHM9MSwgYXR0cnM9eydyYXRlJzogJzEvcyd9KQogICAgCiAgICBkZl90ID0gdC5hc19kZigpCiAgICBkZl91ID0gdS5hc19kZigpCiAgICAKICAgIAogICAgZHJvcF9jb2x1bW5zID0gW10KICAgIGlmIGxhYmVsX2NvbCBpcyBub3QgTm9uZToKICAgICAgICBkcm9wX2NvbHVtbnMuYXBwZW5kKGxhYmVsX2NvbCkKICAgIGlmIHByZWRpY3Rpb25fY29sIGlzIG5vdCBOb25lOgogICAgICAgIGRyb3BfY29sdW1ucy5hcHBlbmQocHJlZGljdGlvbl9jb2wpCiAgICAKICAgIAogICAgY29udGludW91c19mZWF0dXJlcyA9IGRmX3Quc2VsZWN0X2R0eXBlcyhbJ2Zsb2F0J10pCiAgICBpZiBkaXNjcmV0aXplcnMgaXMgTm9uZToKICAgICAgICBkaXNjcmV0aXplcnMgPSB7fQogICAgICAgIGZvciBmZWF0dXJlIGluIGNvbnRpbnVvdXNfZmVhdHVyZXMuY29sdW1uczoKICAgICAgICAgICAgY29udGV4dC5sb2dnZXIuaW5mbyhmJ0ZpdHRpbmcgZGlzY3JldGl6ZXIgZm9yIHtmZWF0dXJlfScpCiAgICAgICAgICAgIGRpc2NyZXRpemVyID0gS0JpbnNEaXNjcmV0aXplcihuX2JpbnM9bl9iaW5zLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5jb2RlPSdvcmRpbmFsJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmF0ZWd5PSd1bmlmb3JtJykKCiAgICAgICAgICAgIGRpc2NyZXRpemVyLmZpdChjb250aW51b3VzX2ZlYXR1cmVzLmxvY1s6LCBmZWF0dXJlXS52YWx1ZXMucmVzaGFwZSgtMSwgMSkpCiAgICAgICAgICAgIGRpc2NyZXRpemVyc1tmZWF0dXJlXSA9IGRpc2NyZXRpemVyCiAgICBvcy5tYWtlZGlycyhjb250ZXh0LmFydGlmYWN0X3BhdGgsIGV4aXN0X29rPVRydWUpCiAgICBkaXNjcmV0aXplcnNfcGF0aCA9IG9zLnBhdGguYWJzcGF0aChmJ3tjb250ZXh0LmFydGlmYWN0X3BhdGh9L2Rpc2NyaXRpemVyLnBrbCcpCiAgICB3aXRoIG9wZW4oZGlzY3JldGl6ZXJzX3BhdGgsICd3YicpIGFzIGY6CiAgICAgICAgcGlja2xlLmR1bXAoZGlzY3JldGl6ZXJzLCBmKQogICAgY29udGV4dC5sb2dfYXJ0aWZhY3QoJ2Rpc2NyaXRpemVycycsIHRhcmdldF9wYXRoPWRpc2NyZXRpemVyc19wYXRoKQogICAgY29udGV4dC5sb2dnZXIuaW5mbygnRGlzY3JldGl6aW5nIGZlYXR1ZXJzJykKICAgIGZvciBmZWF0dXJlLCBkaXNjcmV0aXplciBpbiBkaXNjcmV0aXplcnMuaXRlbXMoKToKICAgICAgICBkZl90W2ZlYXR1cmVdID0gZGlzY3JldGl6ZXIudHJhbnNmb3JtKGRmX3QubG9jWzosIGZlYXR1cmVdLnZhbHVlcy5yZXNoYXBlKC0xLCAxKSkKICAgICAgICBkZl91W2ZlYXR1cmVdID0gZGlzY3JldGl6ZXIudHJhbnNmb3JtKGRmX3UubG9jWzosIGZlYXR1cmVdLnZhbHVlcy5yZXNoYXBlKC0xLCAxKSkKICAgICAgICBkZl90W2ZlYXR1cmVdID0gZGZfdFtmZWF0dXJlXS5hc3R5cGUoJ2ludCcpCiAgICAgICAgZGZfdVtmZWF0dXJlXSA9IGRmX3VbZmVhdHVyZV0uYXN0eXBlKCdpbnQnKQogICAgY29udGV4dC5sb2dfZGF0YXNldCgndF9kaXNjcmV0ZScsIGRmX3QsIGZvcm1hdD0ncGFycXVldCcpCiAgICBjb250ZXh0LmxvZ19kYXRhc2V0KCd1X2Rpc2NyZXRlJywgZGZfdSwgZm9ybWF0PSdwYXJxdWV0JykKICAgIAogICAgCiAgICBjb250ZXh0LmxvZ2dlci5pbmZvKCdDb21wdXRlIHByaW9yIG1ldHJpY3MnKQogICAgCiAgICByZXN1bHRzID0ge30KICAgIHRfcHJpb3IsIHVfcHJpb3IgPSB0b19vYnNlcnZhdGlvbnMoY29udGV4dCwgZGZfdC5kcm9wKGRyb3BfY29sdW1ucywgYXhpcz0xKSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRmX3UuZHJvcChkcm9wX2NvbHVtbnMsIGF4aXM9MSksICdmZWF0dXJlcycpCiAgICByZXN1bHRzWydwcmlvcl90dmQnXSwgcmVzdWx0c1sncHJpb3JfaGVsaW5nZXInXSwgcmVzdWx0c1sncHJpb3Jfa2xkJ10gPSBhbGxfbWV0cmljcyh0X3ByaW9yLCB1X3ByaW9yKQogICAgCiAgICBpZiBwcmVkaWN0aW9uX2NvbCBpcyBub3QgTm9uZToKICAgICAgICBjb250ZXh0LmxvZ2dlci5pbmZvKCdDb21wdXRlIHByZWRpY3Rpb24gbWV0cmljcycpCiAgICAgICAgdF9wcmVkaWN0aW9ucyA9IHBkLkRhdGFGcmFtZShkZl90LmxvY1s6LCBwcmVkaWN0aW9uX2NvbF0pCiAgICAgICAgdV9wcmVkaWN0aW9ucyA9IHBkLkRhdGFGcmFtZShkZl91LmxvY1s6LCBwcmVkaWN0aW9uX2NvbF0pCiAgICAgICAgdF9jbGFzcywgdV9jbGFzcyA9IHRvX29ic2VydmF0aW9ucyhjb250ZXh0LCB0X3ByZWRpY3Rpb25zLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdV9wcmVkaWN0aW9ucywgJ2NsYXNzJykKICAgICAgICByZXN1bHRzWydjbGFzc19zaGlmdF90dmQnXSwgcmVzdWx0c1snY2xhc3Nfc2hpZnRfaGVsaW5nZXInXSwgcmVzdWx0c1snY2xhc3Nfc2hpZnRfa2xkJ10gPSBhbGxfbWV0cmljcyh0X2NsYXNzLCB1X2NsYXNzKQogICAgICAgIAogICAgaWYgbGFiZWxfY29sIGlzIG5vdCBOb25lOgogICAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8oJ0NvbXB1dGUgY2xhc3MgbWV0cmljcycpCiAgICAgICAgdF9sYWJlbHMgPSBwZC5EYXRhRnJhbWUoZGZfdC5sb2NbOiwgbGFiZWxfY29sXSkKICAgICAgICB1X2xhYmVscyA9IHBkLkRhdGFGcmFtZShkZl91LmxvY1s6LCBsYWJlbF9jb2xdKQogICAgICAgIHRfY2xhc3MsIHVfY2xhc3MgPSB0b19vYnNlcnZhdGlvbnMoY29udGV4dCwgdF9sYWJlbHMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1X2xhYmVscywgJ2NsYXNzJykKICAgICAgICByZXN1bHRzWydjbGFzc19zaGlmdF90dmQnXSwgcmVzdWx0c1snY2xhc3Nfc2hpZnRfaGVsaW5nZXInXSwgcmVzdWx0c1snY2xhc3Nfc2hpZnRfa2xkJ10gPSBhbGxfbWV0cmljcyh0X2NsYXNzLCB1X2NsYXNzKQogICAgCiAgICBmb3Iga2V5LCB2YWx1ZSBpbiByZXN1bHRzLml0ZW1zKCk6CiAgICAgICAgaWYgdmFsdWUgPT0gZmxvYXQoJ2luZicpOgogICAgICAgICAgICBjb250ZXh0LmxvZ2dlci5pbmZvKGYndmFsdWU6IHt2YWx1ZX0nKQogICAgICAgICAgICByZXN1bHRzW2tleV09MTAKICAgIGZvciBrZXksIHJlc3VsdCBpbiByZXN1bHRzLml0ZW1zKCk6CiAgICAgICAgY29udGV4dC5sb2dfcmVzdWx0KGtleSwgcm91bmQocmVzdWx0LCAzKSkKICAgICAgICAKICAgIG5vdyA9IHBkLnRvX2RhdGV0aW1lKHN0cihkYXRldGltZS5kYXRldGltZS5ub3coKSkpCiAgICBub3cKICAgIAogICAgcmVzdWx0c1sndGltZXN0YW1wJ10gPSBwZC50b19kYXRldGltZShzdHIoKGRhdGV0aW1lLmRhdGV0aW1lLm5vdygpKSkpCiAgICBjb250ZXh0LmxvZ2dlci5pbmZvKGYiVGltZXN0YW1wOiB7cmVzdWx0c1sndGltZXN0YW1wJ119IikKICAgIHJlc3VsdHNbJ3N0cmVhbSddID0gc3RyZWFtX25hbWUKICAgIHJlc3VsdHNfZGYgPSBwZC5EYXRhRnJhbWUoZGF0YT1bbGlzdChyZXN1bHRzLnZhbHVlcygpKV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnM9bGlzdChyZXN1bHRzLmtleXMoKSkpCiAgICByZXN1bHRzX2RmID0gcmVzdWx0c19kZi5zZXRfaW5kZXgoWyd0aW1lc3RhbXAnLCAnc3RyZWFtJ10pCiAgICB2M2lvX2NsaWVudC53cml0ZSgndHNkYicsIHJlc3VsdHNfdHNkYl90YWJsZSwgZGZzPXJlc3VsdHNfZGYpCgo=
    commands:
    - pip install v3io_frames
    - pip install scikit-learn
    - pip install scipy
    code_origin: https://github.com/mlrun/functions#a29953add7917e0bbeda4517f48bcfbc63f90d15:virtual_drift.ipynb
